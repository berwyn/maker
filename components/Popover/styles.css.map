{"version":3,"file":"styles.css","mappings":"AAgIA,+BACA,eACA,CC5EA,+BACA,SACA,CAEA,6DAEA,oBADA,iBAEA,CChBA,+BAGA,yCACA,kBACA,sCAHA,2BADA,YAKA","sources":["webpack://@square/maker/./src/components/Popover/src/PopoverLayer.vue","webpack://@square/maker/./src/components/Popover/src/PopoverInstance.vue","webpack://@square/maker/./src/components/Popover/src/PopoverContent.vue"],"sourcesContent":["<template>\n\t<div>\n\t\t<pseudo-window @blur.passive=\"handleBlur\">\n\t\t\t<pseudo-window\n\t\t\t\t@mousedown=\"trackClickSrc\"\n\t\t\t\t@touchstart=\"trackClickSrc\"\n\t\t\t\t@click.capture=\"handleClick\"\n\t\t\t\t@touchend=\"handleClick\"\n\t\t\t>\n\t\t\t\t<div\n\t\t\t\t\t:id=\"popoverApi.target\"\n\t\t\t\t\tref=\"portal\"\n\t\t\t\t\t:class=\"$s.PopoverLayer\"\n\t\t\t\t/>\n\t\t\t</pseudo-window>\n\t\t</pseudo-window>\n\t</div>\n</template>\n\n<script>\nimport { fadeInFn, fadeOutFn } from '@square/maker/utils/transitions';\nimport PseudoWindow from 'vue-pseudo-window';\nimport Vue from 'vue';\nimport { PopoverAPIKey } from './keys';\nimport { getPopoverId } from './utils';\n\nconst popoverMixin = {\n\tprovide() {\n\t\t/**\n\t\t * This is to avoid name collisions for the popover portal if\n\t\t * multiple exist at the same 'level'.\n\t\t */\n\t\tconst layerId = getPopoverId();\n\t\tconst target = `popover-portal-${layerId}`;\n\n\t\tconst api = Vue.observable({\n\t\t\tcurrentInstance: undefined,\n\t\t\tactionEl: undefined,\n\t\t\tignoreEls: [],\n\t\t\tclickSrc: undefined,\n\t\t\tlayerId,\n\t\t\ttarget,\n\t\t\ttargetSelector: `#${target}`,\n\t\t\tsetPopover(popoverData) {\n\t\t\t\tif (this.currentInstance) {\n\t\t\t\t\tthis.closePopover();\n\t\t\t\t}\n\n\t\t\t\tif (!popoverData || !popoverData.actionEl) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis.actionEl = popoverData.actionEl;\n\t\t\t\tthis.ignoreEls = popoverData.ignoreEls;\n\t\t\t\tthis.currentInstance = popoverData.id;\n\t\t\t},\n\n\t\t\tclosePopover() {\n\t\t\t\tthis.currentInstance = undefined;\n\t\t\t},\n\t\t});\n\n\t\tif (!this.popoverApi) {\n\t\t\tthis.popoverApi = api;\n\t\t}\n\n\t\treturn {\n\t\t\t[PopoverAPIKey]: api,\n\t\t};\n\t},\n};\n\nexport default {\n\tcomponents: {\n\t\tPseudoWindow,\n\t},\n\n\tinject: {\n\t\tpopoverApi: PopoverAPIKey,\n\t},\n\n\tdata() {\n\t\treturn {\n\t\t\tfadeInFn,\n\t\t\tfadeOutFn,\n\t\t};\n\t},\n\n\tpopoverMixin,\n\n\tbeforeDestroy() {\n\t\tthis.popoverApi.closePopover();\n\t},\n\n\tmethods: {\n\t\thandleBlur() {\n\t\t\tif (document.activeElement !== document.body) {\n\t\t\t\tthis.popoverApi.closePopover();\n\t\t\t}\n\t\t},\n\n\t\ttrackClickSrc({ target }) {\n\t\t\tthis.popoverApi.clickSrc = target;\n\t\t},\n\n\t\thandleClick() {\n\t\t\tconst $portal = this.$refs.portal;\n\t\t\tif (!$portal || !this.popoverApi.clickSrc || !this.popoverApi.currentInstance) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst clickInContainer = $portal.contains(this.popoverApi.clickSrc);\n\t\t\tconst clickInAction = this.popoverApi.actionEl?.contains(this.popoverApi.clickSrc);\n\t\t\tconst clickInIgnores = this.popoverApi.ignoreEls?.some(\n\t\t\t\t(element) => element.contains?.(this.popoverApi.clickSrc),\n\t\t\t);\n\n\t\t\tif (!clickInContainer && !clickInAction && !clickInIgnores) {\n\t\t\t\tthis.popoverApi.closePopover();\n\t\t\t}\n\n\t\t\tthis.popoverApi.clickSrc = undefined;\n\t\t},\n\t},\n};\n</script>\n\n<style module=\"$s\">\n.PopoverLayer {\n\toverflow: hidden;\n}\n</style>\n","<template>\n\t<div :class=\"$s.PopoverInstance\">\n\t\t<!-- @slot Popover content -->\n\t\t<slot />\n\t</div>\n</template>\n\n<script>\nimport { createPopper } from '@popperjs/core';\n\nexport default {\n\tprops: {\n\t\tactionEl: {\n\t\t\ttype: undefined,\n\t\t\trequired: true,\n\t\t},\n\t\tpopperConfig: {\n\t\t\ttype: Object,\n\t\t\tdefault: undefined,\n\t\t},\n\t},\n\n\tmounted() {\n\t\tthis.popper = createPopper(this.actionEl, this.$el, this.popperConfig);\n\t\tthis.resizeObserver = this.followPopoverAction();\n\n\t\tthis.$emit('popover-instance:new-popper', this.popper);\n\t},\n\n\tbeforeDestroy() {\n\t\tthis.resizeObserver.disconnect();\n\t},\n\n\tupdated() {\n\t\tthis.popper.update();\n\t},\n\n\tmethods: {\n\t\tfollowPopoverAction() {\n\t\t\tconst resizeObserver = new ResizeObserver(() => {\n\t\t\t\tthis.popper.update();\n\t\t\t\tthis.$emit('resize');\n\t\t\t});\n\n\t\t\tresizeObserver.observe(this.actionEl);\n\t\t\tresizeObserver.observe(document.body);\n\n\t\t\treturn resizeObserver;\n\t\t},\n\t},\n};\n</script>\n\n<style module=\"$s\">\n.PopoverInstance {\n\tz-index: 1;\n}\n\n.PopoverInstance[data-popper-reference-hidden] {\n\tvisibility: hidden;\n\tpointer-events: none;\n}\n</style>\n","<template>\n\t<div\n\t\t:class=\"$s.PopoverContent\"\n\t\t:style=\"computedStyles\"\n\t>\n\t\t<!-- @slot Popover container content -->\n\t\t<slot />\n\t</div>\n</template>\n\n<script>\nimport chroma from 'chroma-js';\n\nexport default {\n\tprops: {\n\t\t/**\n\t\t * Text color within the popover\n\t\t */\n\t\tcolor: {\n\t\t\ttype: String,\n\t\t\tdefault: '#000',\n\t\t\tvalidator: (color) => chroma.valid(color),\n\t\t},\n\t\t/**\n\t\t * Background color of the popover\n\t\t */\n\t\tbgColor: {\n\t\t\ttype: String,\n\t\t\tdefault: '#fff',\n\t\t\tvalidator: (color) => chroma.valid(color),\n\t\t},\n\t},\n\n\tcomputed: {\n\t\tcomputedStyles() {\n\t\t\treturn {\n\t\t\t\t'--popover-color': this.color,\n\t\t\t\t'--popover-bg-color': this.bgColor,\n\t\t\t};\n\t\t},\n\t},\n};\n</script>\n\n<style module=\"$s\">\n.PopoverContent {\n\tpadding: 24px;\n\tcolor: var(--popover-color);\n\tbackground-color: var(--popover-bg-color);\n\tborder-radius: 8px;\n\tbox-shadow: 0 4px 16px rgba(0, 0, 0, 0.16);\n}\n</style>\n"],"names":[],"sourceRoot":""}